// Generated by CoffeeScript 1.3.1
(function() {

  Aria.classDefinition({
    $classpath: 'games.common.input.TouchInputRecorder',
    $extends: 'games.common.input.BasicInputRecorder',
    $dependencies: ['aria.utils.Event', 'aria.core.Timer', 'games.shoot.utils.Console', 'games.common.input.DefaultInput'],
    $constructor: function() {
      this.$BasicInputRecorder.constructor.call(this);
      this.gameContainer = document.getElementById("gameContainer");
      return this;
    },
    $prototype: {
      start: function() {
        this.$Event.addListener(this.gameContainer, "touchstart", {
          fn: this.onTouchStart,
          scope: this
        });
        return this.$Event.addListener(this.gameContainer, "touchend", {
          fn: this.onTouchEnd,
          scope: this
        });
      },
      stop: function() {
        this.$Event.removeListener(this.gameContainer, "touchstart", {
          fn: this.onTouchStart,
          scope: this
        });
        return this.$Event.removeListener(this.gameContainer, "touchend", {
          fn: this.onTouchEnd,
          scope: this
        });
      },
      onTouchEnd: function(evt) {
        var input;
        switch (evt.touches.length) {
          case 0:
            input = this.getInputByCode('TAP');
            if (input) {
              this.$Console.log("found input to remove");
              return input.complete();
            }
            break;
          case 1:
            input = this.getInputByCode('DOUBLETAP');
            if (input) {
              this.$Console.log("found input to remove");
              return input.complete();
            }
        }
      },
      onTouchStart: function(evt) {
        var input, touch;
        if (evt.touches.length === 2) {
          input = new this.$DefaultInput('DOUBLETAP', this._currentGameTime);
        } else if (evt.touches.length === 1) {
          input = new this.$DefaultInput('TAP', this._currentGameTime);
        }
        if (!this.getInputByCode(input.getCode())) {
          touch = evt.targetTouches[0];
          input.x = touch.pageX - this.gameContainer.getBoundingClientRect().left;
          input.y = touch.pageY - this.gameContainer.getBoundingClientRect().top;
          return this.addInputAndPrevent(input, evt);
        }
      },
      addInputAndPrevent: function(input, event) {
        var touch;
        this.addInput(input);
        touch = event.targetTouches[0];
        return event.preventDefault();
      }
    }
  });

}).call(this);
