// Generated by CoffeeScript 1.3.1
(function() {

  Aria.classDefinition({
    $classpath: 'games.common.engine.GameEngine',
    $extends: 'games.common.BaseObject',
    $dependencies: ['aria.utils.Array', 'games.common.assert.Assert', 'games.common.entity.Entity', 'games.common.clock.AnimationLoop', 'games.common.clock.Timer'],
    $implements: ['games.common.engine.Engine'],
    $statics: {
      getDefaultImplementation: function(context) {
        var timer;
        timer = new games.common.clock.Timer(50);
        return new games.common.engine.GameEngine(context, timer);
      }
    },
    $constructor: function(context, timer) {
      this.$BaseObject.constructor.call(this);
      this.timer = this.$Assert.isInstanceOf(timer, 'games.common.clock.Timer');
      this.context = context;
      this.entities = [];
      return this;
    },
    $prototype: {
      addEntity: function(entity) {
        this.$Assert.isInstanceOf(entity, 'games.common.entity.Entity');
        return this.entities.push(entity);
      },
      update: function() {
        var delta, i, _i, _ref, _results;
        this.timer.update();
        delta = this.timer.getDelta();
        _results = [];
        for (i = _i = _ref = this.entities.length - 1; _i >= 0; i = _i += -1) {
          _results.push(this.updateEntity(this.entities[i], delta));
        }
        return _results;
      },
      draw: function() {
        var entity, _i, _len, _ref;
        this.context.save();
        this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);
        _ref = this.entities;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          entity = _ref[_i];
          entity.draw(this.context);
        }
        return this.context.restore();
      },
      removeEntity: function(entity) {
        return this.$Array.remove(this.entities, entity);
      },
      updateEntity: function(entity, delta) {
        if (entity.isDestroyed()) {
          return this.removeEntity(entity);
        } else {
          return entity.update(delta, this.timer);
        }
      },
      getTimer: function() {
        return this.timer;
      },
      getEntities: function() {
        return this.entities;
      },
      setEntities: function(entities) {
        this.entities = entities;
      }
    }
  });

}).call(this);
