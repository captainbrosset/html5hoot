// Generated by CoffeeScript 1.3.1
(function() {

  Aria.classDefinition({
    $classpath: 'games.shoot.controller.loading.LoadingController',
    $extends: 'games.common.BaseObject',
    $dependencies: ['games.common.clock.EngineClock', 'games.common.engine.GameEngine', 'games.common.input.StandardKeyboardRecorder', 'games.common.input.TouchInputRecorder', 'games.common.utils.UserAgent', 'games.shoot.asset.Assets', 'games.shoot.controller.loading.AssetLoadingIndicator', 'games.shoot.controller.loading.GameTitle', 'games.shoot.controller.loading.InviteText', 'games.shoot.engine.ExtendedEngine', 'games.shoot.utils.RecorderFactory'],
    $events: {
      'complete': 'fired when controller is done and should be replaced by next one'
    },
    $constructor: function(assetManager, overlayContext) {
      this.$BaseObject.constructor.call(this);
      this.assetManager = assetManager;
      if (this.$UserAgent.isTouchDevice()) {
        this.recorder = new this.$TouchInputRecorder;
      } else {
        this.recorder = new this.$StandardKeyboardRecorder(this.$RecorderFactory.getKeyboardRecorder());
      }
      this.loadingEngine = this.$ExtendedEngine.getDefaultImplementation(overlayContext);
      this.loadingClock = this.$EngineClock.getDefaultImplementation(this.loadingEngine);
      return this;
    },
    $prototype: {
      start: function() {
        var entity, _i, _len, _ref;
        this.loadingClock.start();
        this.assetLoadingIndicator = new this.$AssetLoadingIndicator;
        this.gameTitle = new this.$GameTitle;
        _ref = [this.assetLoadingIndicator, this.gameTitle];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          entity = _ref[_i];
          this.loadingEngine.addEntity(entity);
        }
        this.loadingEngine.addController(this);
        return this.downloadAssets();
      },
      update: function(deltaTime) {
        this.recorder.update();
        if (this.recorderHasStartInput()) {
          return this.leaveLoadingController();
        }
      },
      recorderHasStartInput: function() {
        if (this.$UserAgent.isTouchDevice()) {
          return this.recorder.getInputByCode('TAP');
        } else {
          return this.recorder.getInputByCode('ENTER');
        }
      },
      downloadAssets: function() {
        this.assetManager.queueDownloads(this.$Assets);
        this.assetManager.$on({
          assetLoaded: {
            fn: this.onAssetLoaded,
            scope: this
          }
        });
        return this.assetManager.download({
          fn: this.onAssetPreloadFinished,
          scope: this
        });
      },
      leaveLoadingController: function() {
        this.recorder.stop();
        this.loadingClock.stop();
        return this.$raiseEvent("complete");
      },
      onAssetLoaded: function(evt) {
        return this.assetLoadingIndicator.setContent("" + (evt.successCount - 1) + "/" + evt.total);
      },
      onAssetPreloadFinished: function() {
        this.assetLoadingIndicator.destroy();
        this.displayPressEnter();
        return this.recorder.start();
      },
      displayPressEnter: function() {
        return this.loadingEngine.addEntity(new this.$InviteText());
      }
    }
  });

}).call(this);
