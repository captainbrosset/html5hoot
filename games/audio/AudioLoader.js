// Generated by CoffeeScript 1.3.1
(function() {

  Aria.classDefinition({
    $classpath: 'games.audio.AudioLoader',
    $extends: 'games.common.BaseObject',
    $dependencies: ['games.common.input.MouseRecorder', 'games.shoot.engine.ExtendedEngine', 'games.common.clock.EngineClock', 'games.audio.entity.SoundGenerator', 'games.common.asset.AssetManager', 'games.audio.Assets', 'games.common.hitbox.SquareHitbox'],
    $statics: {
      MOUSELEFT: 'MOUSE_0',
      MOUSERIGHT: 'MOUSE_2'
    },
    $constructor: function(gameContainerId) {
      var context;
      this.$BaseObject.constructor.call(this);
      this.gameContainer = document.getElementById(gameContainerId);
      context = this.createContext();
      this.inputRecorder = new this.$MouseRecorder;
      this.inputRecorder.start();
      this.engine = this.$ExtendedEngine.getDefaultImplementation(context);
      this.engineClock = this.$EngineClock.getDefaultImplementation(this.engine);
      this.engine.addController(this);
      games.shoot.AssetManager = this.$AssetManager.getDefaultImplementation();
      games.shoot.AssetManager.setRootFolder('resources/img/');
      this.assetManager = games.shoot.AssetManager;
      this.assetManager.queueDownloads(this.$Assets);
      return this.assetManager.download({
        fn: function() {
          return this.engineClock.start();
        },
        scope: this
      });
    },
    $prototype: {
      update: function(delta) {
        var input;
        this.inputRecorder.update();
        input = this.inputRecorder.getInputByCode(this.MOUSELEFT);
        if (input != null ? input.isCompleted() : void 0) {
          return this.onLeftClick(input);
        }
      },
      onLeftClick: function(input) {
        var entity, x, y, _ref;
        _ref = this.translateCoordinates(input.getX(), input.getY()), x = _ref[0], y = _ref[1];
        entity = this.getEntityAtCoords(x, y);
        if (entity) {
          return entity.makeNoise();
        } else {
          return this.createEntityAt(x, y);
        }
      },
      createEntityAt: function(x, y) {
        var soundGenerator;
        soundGenerator = new this.$SoundGenerator(x, y);
        this.engine.addEntity(soundGenerator);
        return console.log("Added Entity at : X : '" + x + "' and Y : '" + y + "'");
      },
      getEntityAtCoords: function(x, y) {
        var entities,
          _this = this;
        entities = this.engine.getEntities().filter(function(entity) {
          return _this.isOnEntity(x, y, entity);
        });
        return entities[0];
      },
      translateCoordinates: function(x, y) {
        var origX, origY;
        origX = this.gameContainer.getBoundingClientRect().left;
        origY = this.gameContainer.getBoundingClientRect().top;
        return [x - origX, y - origY];
      },
      createContext: function() {
        var canvas, container;
        canvas = document.createElement('canvas');
        canvas.width = 480;
        canvas.height = 640;
        container = document.createElement('div');
        container.className = "canvasContainer";
        container.appendChild(canvas);
        this.gameContainer.appendChild(container);
        return canvas.getContext('2d');
      },
      isOnEntity: function(x, y, entity) {
        return entity.getHitbox().intersects(new this.$SquareHitbox(x, y, 0, 0));
      },
      conflictsWithEntity: function(x, y, entity) {
        return entity.getHitbox().intersects(new this.$SquareHitbox(x - 16, y - 16, 32, 32));
      }
    }
  });

}).call(this);
